generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(cuid())
  name                String
  email               String    @unique
  password            String    @map("password")
  resetToken          String?   @unique @map("reset_token")
  resetTokenExpiresAt DateTime? @map("reset_token_expires_at")
  role                Role      @default(USER)
  active              Boolean   @default(true)
  customerId String?  @unique   @map("customer_id")

  visits   Visit[]
  projects UserToProject[]

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@index([email,name])
  @@map("users")
}

enum Role {
  USER
  SUPERADMIN
}

model UserToProject {
  id         String @id @default(cuid())
  role       UserProjectRole @default(MEMBER)

  userId     String @map("user_id")
  projectId  String @map("project_id")
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@map("users_to_projects")
}

enum UserProjectRole {
  OWNER
  MEMBER
}

model Project {
  id          String  @id @default(cuid())
  name        String
  description String
  value       Int     @default(0)
  currency    String  @db.String(3) @default("USD")
  showTasks   Boolean @default(true) @map("show_tasks")

  users UserToProject[]
  tasks Task[]
  invoices Invoice[]

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@map("projects")
}

model Invoice {
  id          String @id @default(cuid())
  description String
  amount      Int
  currency    String @db.String(3)
  dueDate     DateTime @map("due_date")

  status InvoiceStatus @default(PENDING)

  projectId String @map("project_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@map("invoices")
}

enum InvoiceStatus {
  PENDING
  PAID
}

model Task {
  id          String    @id @default(cuid())
  name        String
  description String
  weight      Int       @default(0)
  completed   DateTime?

  dependecyId  String? @map("dependecy_id")
  dependecy    Task?   @relation("dependecyTasks", fields: [dependecyId], references: [id])
  dependencies Task[]  @relation("dependecyTasks")

  projectId String @map("project_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Visit {
  id             String  @id @default(cuid())
  city           String?
  country        String?
  region         String?
  latitude       String?
  longitude      String?
  model          String?
  type           String?
  vendor         String?
  browserName    String? @map("browser_name")
  browserVersion String? @map("browser_version")
  osName         String? @map("os_name")
  osVersion      String? @map("os_version")
  isBot          Boolean @default(false) @map("is_bot")
  ip             String?
  referrer       String?

  userId String? @map("user_id")
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  actions  Action[]
  messages Message[]

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@map("visits")
}

model Action {
  id          String  @id @default(cuid())
  action      String
  description String?
  visitId     String
  visit       Visit   @relation(fields: [visitId], references: [id])

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@map("actions")
}

model Message {
  id      String  @id @default(cuid())
  name    String
  email   String
  message String  @db.String(500)
  visitId String?
  visit   Visit?  @relation(fields: [visitId], references: [id])

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@map("messages")
}
